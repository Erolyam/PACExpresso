// ATTENTION : le module grunt-css-url-replace est customisé !!!
// TODO: créer un nouveau module

// grunt [default] : create css and js files
// grunt lint : jshint javascript files
// grunt autolint : automatically run jshint on watched javascript files


module.exports = function(grunt) {

  grunt.loadNpmTasks('grunt-contrib-jshint');
  grunt.loadNpmTasks('grunt-contrib-uglify');
  grunt.loadNpmTasks('grunt-contrib-watch');
  grunt.loadNpmTasks('grunt-cssc');
  grunt.loadNpmTasks('grunt-css-url-replace'); // attention customisé !!!

  // Default task(s).
  grunt.registerTask('default', [
      'css_url_replace:layout_all_css_create',
      'stripBlockComments:layout_all_css',
      'cssc:layout_all_css',
      'jshint:default',
      'uglify:all',
  ]);

  grunt.registerTask('lint', ['jshint:default']);
  grunt.registerTask('autolint', ['jshint:default', 'watch']);

  grunt.initConfig({

    // Concat css file, and replaces url() with relative url
    css_url_replace: {
      layout_all_css_create: {
          options: {
            staticRoot: 'public/compiled'
          },
          files: {'public/compiled/layout_all.css': [
              "public/extlib/twitter-bootstrap/css/bootstrap.css",
              "public/extlib/twitter-bootstrap/css/bootstrap-theme.css",
              "public/css/custom.css",
              "public/css/fonts/GillSans/webfont.css",
          ]},
      },
    }, //css_url_replace



    // remove block comments
    stripBlockComments: {
      layout_all_css: {
        files: {
          'public/compiled/layout_all.css': 'public/compiled/layout_all.css'
        },
      }
    }, // stripComments



    // Compress CSS file generated by css_url_replace
    cssc: {
      layout_all_css: {
        options: {
          sort: true,
          lineBreaks: true,
          consolidateViaSelectors: false,
          consolidateViaDeclarations: false,
          oconsolidateMediaQueries: true
        },
        files: {
          'public/compiled/layout_all.css': 'public/compiled/layout_all.css'
        },
      },
    }, //cssc



    // Concat and compress Javascript code
    uglify: {
      options: {
        mangle: true,
        compress: { warnings: false },
        beautify: { 'max_line_len': 80 }
      },
      all: {
        files: {
          "public/compiled/layout_all.js": [
            "public/extlib/es5-shim/es5-shim.js",
            "public/extlib/es5-shim/es5-sham.js",
            "public/extlib/es6-shim/es6-shim.js",
            "public/extlib/jquery1/jquery.js",
            "public/extlib/twitter-bootstrap/js/bootstrap.js",
            "public/extlib/lodash-compat/lodash.js",
            "public/js/gb.js",
            "public/js/mestests/passer.js",
            "public/js/admin/stats.js",
          ],
          "public/compiled/layout_admin.js": [
            "public/extlib/datatables/jquery.dataTables.js",
            "public/extlib/datatables/DT_bootstrap.js",
            "public/js/admin/examens.js",
          ],
        }, // files
      }, // all
    }, // uglify



    // run "grunt jshint:default" to link our js files
    jshint: {
        options: {},
        changed: {
          src:'changed on watch event'
        },
        default: {
          src:[],
        },
    }, //jshint



    // automatically run jshint on watched javascript files
    watch: {
      lintFiles: {
        files: '<%= jshint.default.src %>',
        tasks: ['jshint:changed'],
        options: { spawn: false, },
      },
    }, // watch



  });

  // on watch events configure jshint:all to only run on changed file
  grunt.event.on('watch', function(action, filepath, keyname) {
    if ('lintFiles' == keyname) {
      grunt.config('jshint.changed.src', filepath);
    }
  });



  // task for removing block comments
  grunt.registerMultiTask('stripBlockComments', 'Remove all block comments', function() {
    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({});

    // Iterate over all specified file groups.
    this.files.forEach(function(f){
      var src = f.src.filter(function(filepath) {
        // Warn on and remove invalid source files (if nonull was set).
        if (!grunt.file.exists(filepath)) {
          grunt.log.warn('Source file "' + filepath + '" not found.');
          return false;
        }
        return true;
      }).map(function(filepath) {
        // Read file source.
        return grunt.file.read(filepath);
      }).join("");

      // process
      src = src.replace(/\/\*[\s\S]*?\*\//g, '');

      // Write the destination file.
      grunt.file.write(f.dest, src);

      // Print a success message.
      grunt.log.writeln('File "' + f.dest + '" created.');
    });
  }); // grunt.registerMultiTask('stripComments')


}; // module.exports = function(grunt) {

